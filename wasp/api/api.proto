syntax = "proto3";

package api;

import "github.com/vx-labs/mqtt-protocol/packet/pb.proto";

message RetainedMessage {
  packet.Publish Publish = 1;
  int64 LastAdded = 2;
  int64 LastDeleted = 3;
}

message RetainedMessageList {
  repeated RetainedMessage RetainedMessages = 1;
}

message SessionMetadatas {
  string SessionID = 1;
  string ClientID = 2;
  int64 ConnectedAt = 3;
  uint64 Peer = 4;
  packet.Publish LWT = 5;
  string MountPoint = 6;
  int64 LastAdded = 7;
  int64 LastDeleted = 8;
}

message SessionMetadatasList {
  repeated SessionMetadatas SessionMetadatas = 1;
}

message Subscription {
  string SessionID = 1;
  uint64 Peer = 2;
  bytes Pattern = 3;
  int32 QoS = 4;
  int64 LastAdded = 5;
  int64 LastDeleted = 6;
}

message SubscriptionList {
  repeated Subscription Subscriptions = 1;
}


message DistributeMessageRequest {
  packet.Publish Message = 1;
  bool ResolveRemoteRecipients = 2;
}
message DistributeMessageResponse {}

message ListSessionMetadatasRequest {}
message ListSessionMetadatasResponse {
  repeated SessionMetadatas SessionMetadatasList = 1;
}
message CreateSubscriptionRequest {
  string SessionID = 1;
  uint64 Peer = 2;
  bytes Pattern = 3;
  int32 QoS = 4;
}
message CreateSubscriptionResponse {}
message DeleteSubscriptionRequest {
  string SessionID = 1;
  uint64 Peer = 2;
  bytes Pattern = 3;
}
message DeleteSubscriptionResponse {}
message ListSubscriptionsResponse {
  repeated Subscription Subscriptions = 1;
}
message ListSubscriptionsRequest {}
service MQTT {
  rpc ListSubscriptions(ListSubscriptionsRequest)
      returns (ListSubscriptionsResponse) {}
  rpc DeleteSubscription(DeleteSubscriptionRequest)
      returns (DeleteSubscriptionResponse) {}
  rpc CreateSubscription(CreateSubscriptionRequest)
      returns (CreateSubscriptionResponse) {}
  rpc DistributeMessage(DistributeMessageRequest)
      returns (DistributeMessageResponse) {}
  rpc ListSessionMetadatas(ListSessionMetadatasRequest)
      returns (ListSessionMetadatasResponse) {}
}
